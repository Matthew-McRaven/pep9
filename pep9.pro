# #####################################################################
# Automatically generated by qmake (2.01a) Mon Apr 13 22:35:17 2009
# #####################################################################
TEMPLATE = app
TARGET = Pep9
PEP9_VERSION = 91

DEPENDPATH += .
INCLUDEPATH += .
QT += webenginewidgets
QT += widgets
QT += printsupport

# Mac icon/plist
ICON = images/pep9.icns
QMAKE_INFO_PLIST = app.plist
QMAKE_MAC_SDK = macosx10.13

# Windows RC file
RC_FILE = pep9resources.rc

# Input
HEADERS += \
    aboutpep.h \
    argument.h \
    asm.h \
    assemblerlistingpane.h \
    byteconverterbin.h \
    byteconverterchar.h \
    byteconverterdec.h \
    byteconverterhex.h \
    byteconverterinstr.h \
    code.h \
    cpphighlighter.h \
    cpupane.h \
    enu.h \
    helpdialog.h \
    inputpane.h \
    listingtracepane.h \
    mainwindow.h \
    memorycellgraphicsitem.h \
    memorydumppane.h \
    memorytracepane.h \
    objectcodepane.h \
    outputpane.h \
    pep.h \
    pephighlighter.h \
    redefinemnemonicsdialog.h \
    sim.h \
    sourcecodepane.h \
    stackframefsm.h \
    terminalpane.h

SOURCES += \
    aboutpep.cpp \
    asm.cpp \
    assemblerlistingpane.cpp \
    byteconverterbin.cpp \
    byteconverterchar.cpp \
    byteconverterdec.cpp \
    byteconverterhex.cpp \
    byteconverterinstr.cpp \
    code.cpp \
    cpphighlighter.cpp \
    cpupane.cpp \
    helpdialog.cpp \
    inputpane.cpp \
    listingtracepane.cpp \
    main.cpp \
    mainwindow.cpp \
    memorycellgraphicsitem.cpp \
    memorydumppane.cpp \
    memorytracepane.cpp \
    objectcodepane.cpp \
    outputpane.cpp \
    pep.cpp \
    pephighlighter.cpp \
    redefinemnemonicsdialog.cpp \
    sim.cpp \
    sourcecodepane.cpp \
    stackframefsm.cpp \
    terminalpane.cpp

FORMS += mainwindow.ui \
    sourcecodepane.ui \
    objectcodepane.ui \
    cpupane.ui \
    assemblerlistingpane.ui \
    memorytracepane.ui \
    memorydumppane.ui \
    inputpane.ui \
    outputpane.ui \
    terminalpane.ui \
    redefinemnemonicsdialog.ui \
    byteconverterhex.ui \
    byteconverterdec.ui \
    byteconverterchar.ui \
    byteconverterbin.ui \
    helpdialog.ui \
    listingtracepane.ui \
    aboutpep.ui \
    byteconverterinstr.ui
RESOURCES += pep9resources.qrc \
    helpresources.qrc

DISTFILES += \
    config/control.js \
    packages/pep9/installscript.js \
    config/DeployWindows.pdf \
    config/DeployWindows2.pdf \
    config/configlinux.xml \
    config/configwin32.xml \
    packages/pep9/package.xml \
    config/DeployMac.txt \
    packages/pep9/License.txt

#Generic paths that make future parts of the code easier
QtDir = $$clean_path($$[QT_INSTALL_LIBS]/..)
QtInstallerBin=$$clean_path($$QtDir/../../tools/Qtinstallerframework/3.0/bin)
OutputInstallerName=Pep"$$PEP9_VERSION"
#All that needs to be done for mac is to run the DMG creator.
#The DMG creator will only be run in Release mode, not debug.
!CONFIG(debug,debug|release):macx{
    #For some reason, the release flag is set in both debug and release.
    #So, the above Config(...) makes it so a disk image is only built in release mode.

    #Create necessary directory structure for disk image.
    QMAKE_POST_LINK += $${QMAKE_MKDIR} $$OUT_PWD/Installer;
    #Copy over the executable and bundle it with its dependencies
    QMAKE_POST_LINK += $${QMAKE_COPY_DIR} $$OUT_PWD/Pep9.app $$OUT_PWD/Installer;
    QMAKE_POST_LINK += $$QtDir/bin/macdeployqt $$OUT_PWD/Installer/Pep9.app;
    #Use HDIUtil to make a folder into a read/write image
    QMAKE_POST_LINK += hdiutil create -volname Pep9 -srcfolder $$OUT_PWD/Installer -attach -ov -format UDRW Pep9Temp.dmg;
    #Link from the read/write image to the machine's Applications folder
    QMAKE_POST_LINK += ln -s /Applications /Volumes/Pep9/Applications;
    #Unmount the image, and create a new compressed, readonly image.
    QMAKE_POST_LINK += hdiutil detach /Volumes/Pep9;
    QMAKE_POST_LINK += $${QMAKE_COPY} $$OUT_PWD/Pep9Temp.dmg $$OUT_PWD/Pep9Temp2.dmg;
    QMAKE_POST_LINK += hdiutil convert -format UDBZ -o $$OUT_PWD/$$OutputInstallerName"Mac.dmg" $$OUT_PWD/Pep9Temp2.dmg;
    #Remove the temporary read/write image.
    QMAKE_POST_LINK += $${QMAKE_DEL_FILE} $$OUT_PWD/Pep9Temp.dmg;
    QMAKE_POST_LINK += $${QMAKE_DEL_FILE} $$OUT_PWD/Pep9Temp2.dmg;
    #If QMAKE_POST_LINK stops working in a future version, QMAKE provides another way to add custom targets.
    #Use the method described in "Adding Custom Targets" on http://doc.qt.io/qt-5/qmake-advanced-usage.html.
    #Our deployment tool will be called anytime the application is sucessfully linked in release mode.
}

#Otherwise if the target is windows, but no installer framework exists
else:!CONFIG(debug,debug|release):win32:!exists($$QtInstallerBin/repogen.exe){
    warning("Aborting installer creations, since QT Installer Framework 3.0 is not installed.")
    warning("Please run the QT maintence tool and install QT Installer Framework 3.0.")
}
    #Otherwise build the installer for windows as normal.
else:!CONFIG(debug,debug|release):win32{
    repoDir=$$OUT_PWD/Repository/win32
    #Create installer directory structure
    QMAKE_POST_LINK += $${QMAKE_MKDIR} \"$$OUT_PWD/Installer\" & \
        $${QMAKE_MKDIR} \"$$OUT_PWD/Installer/packages\" & \
        $${QMAKE_MKDIR} \"$$OUT_PWD/Installer/packages/pep9cpu\" & \
        $${QMAKE_MKDIR} \"$$OUT_PWD/Installer/packages/pep9cpu/meta\" & \
        $${QMAKE_MKDIR} \"$$OUT_PWD/Installer/packages/pep9cpu/data\" & \
        $${QMAKE_MKDIR} \"$$OUT_PWD/Installer/config\" &
    #Create a directory for update information
    !exists($$repoDir){
        QMAKE_POST_LINK += $${QMAKE_MKDIR} \"$$repoDir\" &
    }
    #Copy over files needed to create installer
    QMAKE_POST_LINK += $${QMAKE_COPY} \"$$shell_path($$PWD\config\configwin32.xml)\" \"$$shell_path($$OUT_PWD/Installer/config/config.xml)\" & \
        $${QMAKE_COPY} \"$$shell_path($$PWD/images/icon.ico)\" \"$$shell_path($$OUT_PWD/Installer/config)\" & \
        $${QMAKE_COPY} \"$$shell_path($$PWD/images/Pep9cpu-icon.png)\" \"$$shell_path($$OUT_PWD/Installer/config)\" & \
        $${QMAKE_COPY} \"$$shell_path($$PWD/packages/pep9cpu/package.xml)\" \"$$shell_path($$OUT_PWD/Installer/packages/pep9cpu/meta)\" & \
        $${QMAKE_COPY} \"$$shell_path($$PWD/packages/pep9cpu/License.txt)\" \"$$shell_path($$OUT_PWD/Installer/packages/pep9cpu/meta)\" & \
        $${QMAKE_COPY} \"$$shell_path($$PWD/packages/pep9cpu/installscript.js)\" \"$$shell_path($$OUT_PWD/Installer/packages/pep9cpu/meta)\" & \
        $${QMAKE_COPY} \"$$shell_path($$PWD/config/control.js)\" \"$$shell_path($$OUT_PWD/Installer/config)\" &
    #Copy over executable
    QMAKE_POST_LINK +=  $${QMAKE_COPY} \"$$shell_path($$OUT_PWD/Pep9CPU.exe)\" \"$$shell_path($$OUT_PWD/Installer/packages/pep9cpu/data)\" &
    #Execute windeployqt to copy over needed binaries
    #Need to prune extra unneeded libraries, but the first goal is to get a working standalone program
    QMAKE_POST_LINK += \"$$QtDir/bin/windeployqt\" --no-translations --no-system-d3d-compiler \"$$OUT_PWD/Installer/packages/pep9cpu/data/Pep9CPU.exe\" &
    #Execute repository creator
    QMAKE_POST_LINK += \"$$QtInstallerBin/repogen\" --update-new-components -p $$OUT_PWD/Installer/packages $$repoDir &
    #Create installer
    QMAKE_POST_LINK += \"$$QtInstallerBin/binarycreator\" -c \"$$OUT_PWD/Installer/config/config.xml\" -p \"$$OUT_PWD/Installer/packages\" \
 \"$$OUT_PWD/Installer/$$OutputInstallerName"Win"\" &
}

#Since there is no native QT deploy tool for Linux, one must be added in the project configuration
#This condition is to make sure that a tool was provided as an argument to qmake
else:linux:isEmpty(LINUX_DEPLOY){
    warning("Attempting a Linux build, but no path to the build tool was provided")
}

#Then linuxdeployqt is available, and it should be used to make a working installer for linux.
else:linux{
    message("This is where the linux build code will go")
}
